在远程服务上执行命令
如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令。
$ redis-cli -h host -p port -a password
ps : $redis-cli -h 127.0.0.1 -p 6379 -a "mypass"

什么是基数?
比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。


Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。
string类型是Redis最基本的数据类型，一个键最大能存储512MB。


string（字符串）
127.0.0.1:6379> set xj xiaojing
127.0.0.1:6379> get xj
127.0.0.1:6379> set num 5
127.0.0.1:6379> incr num
127.0.0.1:6379> decr num
127.0.0.1:6379> del xj



Redis 哈希(Hash)
Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。
127.0.0.1:6379> hset hash1 key1 12    //HSET key field value 将哈希表 key 中的字段 field 的值设为 value 。
127.0.0.1:6379> hset hash1 key2 13
127.0.0.1:6379> hset hash1 key3 13
127.0.0.1:6379> hset hash1 key3 14    //将哈希表 hash1 中的字段 key3 的值设为 14 。
127.0.0.1:6379> hget hash key3    //HGET key field 获取存储在哈希表中指定字段的值。
127.0.0.1:6379> hlen hash1    //获取哈希表中字段的数量
127.0.0.1:6379> hmget hash1 key1 key2    //HMGET key field1 [field2] 获取所有给定字段的值



Redis 列表(List)有序列表,元素的值可以相同
127.0.0.1:6379> lpush list 12  //从左边推入一个元素12
127.0.0.1:6379> lpush list 13	//从左边推入一个元素13
127.0.0.1:6379> lpush list 13	//从左边推入一个元素13
127.0.0.1:6379> llen list    //获取列表长度
127.0.0.1:6379> rpop list     //移除并获取列表最右边一个元素,12被推入的，所以12在最右边



Redis 集合(Set)
Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。
127.0.0.1:6379> sadd set1 12 13 13  //向集合添加一个或多个成员	
127.0.0.1:6379> smembers set1    //返回集合中的所有成员
127.0.0.1:6379> sismember set1 13    //判断 13 元素是否是集合 key 的成员
127.0.0.1:6379> srem set1 13    //SREM key member1 [member2] 移除集合中一个或多个成员



Redis 有序集合(sorted set)
Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。

不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。

有序集合的成员是唯一的,但分数(score)却可以重复。

127.0.0.1:6379> zadd zset1 10.1 val1   //ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数
127.0.0.1:6379> zadd zset1 11.2 val2
127.0.0.1:6379> zadd zset1 9.2 val3
127.0.0.1:6379> zcard zset1  //	ZCARD key 获取有序集合的成员数
127.0.0.1:6379> zrange zset1 0 2 withscores //	ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合成指定区间内的成员
127.0.0.1:6379> zrank zset1 val2    //	ZRANK key member 返回有序集合中指定成员的索引
127.0.0.1:6379> zadd zset1 12.2 val3
127.0.0.1:6379> zrange zset1 0 2 withscores
127.0.0.1:6379> zadd zset1 12.2 val2
127.0.0.1:6379> zrange zset1 0 2 withscores



php扩展redis的文档
https://github.com/phpredis/phpredis


Redis类的命名空间是根。这也是有时候找不到这个类的原因

连接到 redis 服务
<?php
   $redis = new \Redis();//连接本地的 Redis 服务
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully";
   echo "Server is running: " . $redis->ping();//查看服务是否运行
?>



Redis PHP String(字符串) 实例,常用于存字符串
<?php
   $redis = new Redis(); //连接本地的 Redis 服务
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully";

   $redis->set("tutorial-name", "Redis tutorial"); //设置 redis 字符串数据
   echo $redis->get("tutorial-name");// 获取存储的数据并输出

   $redis->set('num',5);
   $redis->incr('num',3);
   $redis->decr('num',1);
   echo $redis->get('num');
?>


Redis PHP List(列表) 实例,常用于队列
<?php
   //连接本地的 Redis 服务
   $redis = new \Redis();
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully<hr>";	

   //存储数据到列表中
   $redis->delete('tutorial-list');
   $redis->lpush("tutorial-list", "Redis");
   $redis->lpush("tutorial-list", "Mongodb");
   $redis->lpush("tutorial-list", "Mysql");

   $val = $redis->rpop('tutorial-list');
   var_dump($val);

   // 获取存储的数据并输出
   $arList = $redis->lrange("tutorial-list", 0 ,5);
   print_r($arList);

?>



Redis PHP set 实例
<?php
   //连接本地的 Redis 服务
   $redis = new \Redis();
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully<hr>";	

   $redis->delete('set1');

   //存储数据到列表中
   $redis->sAdd('set1','a');
   $redis->sAdd('set1','b');
   $redis->sAdd('set1','c');
   $redis->sAdd('set1','c');

   $val = $redis->sCard('set1');
   var_dump($val);

   // 获取存储的数据并输出
   $val = $redis->sMembers('set1');
   print_r($val);
?>


Redis PHP Hash 实例
<?php
   //连接本地的 Redis 服务
   $redis = new \Redis();
   $redis->connect('127.0.0.1', 6379);

   $redis->delete('driver1');

   //存储数据到列表中
   $redis->hSet('driver1','name','xiaojing');
   $redis->hSet('driver1','age',27);
   $redis->hSet('driver1','gender',1);

   $val = $redis->hGet('driver1','name');
   var_dump($val);

   $val = $redis->hMGet('driver1', array('name', 'age')); 
   var_dump($val);

   var_dump($redis->hGetAll('driver1'));
?>


Redis PHP sort set 实例,常用于排行榜
<?php
   //连接本地的 Redis 服务
   $redis = new \Redis();
   $redis->connect('127.0.0.1', 6379);

   $redis->delete('grade');

   //存储数据到列表中
   $redis->zAdd('grade',88,'xiaojing');
   $redis->zAdd('grade',82,'haning');
   $redis->zAdd('grade',91,'lanpei');

   $val = $redis->zRange('grade',0,-1);
   var_dump($val);

   $val = $redis->zRevRange('grade',0,-1);
   var_dump($val);
?>